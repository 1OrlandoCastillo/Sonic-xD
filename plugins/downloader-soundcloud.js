import axios from 'axios';
import yts from 'yt-search';
import fs from 'fs';
import path from 'path';
import ffmpeg from 'fluent-ffmpeg';
import { pipeline } from 'stream';
import { promisify } from 'util';

const streamPipeline = promisify(pipeline);

const handler = async (m, { conn, text, usedPrefix, command }) => {
  if (!text) {
    return m.reply(`> ùòåùò¥ùò§ùò≥ùò™ùò£ùò¶ ùò¶ùò≠ ùòØùò∞ùòÆùò£ùò≥ùò¶ ùò•ùò¶ùò≠ ùò∑ùò™ùò•ùò¶ùò∞ ùò±ùò¢ùò≥ùò¢ ùò±ùò∞ùò•ùò¶ùò≥ ùò•ùò¶ùò¥ùò§ùò¢ùò≥ùò®ùò¢ùò≥ùò≠ùò∞.\n\nùòåùò´ùò¶ùòÆùò±ùò≠ùò∞: .ùò±ùò≠ùò¢ùò∫1 ùò£ùò∞ùò≠ùò™ùò≠ùò≠ùò∞ùò¥ ùòµùò≥ùò¢ùò∑ùò™ùò¶ùò¥ùò∞ùò¥.ü•ñ`);
  }

  await conn.sendMessage(m.chat, {
    react: { text: '‚è≥', key: m.key }
  });

  try {
    const search = await yts(text);
    const video = search.videos[0];
    if (!video) throw new Error('> ùòïùò∞ ùò¥ùò¶ ùò±ùò∂ùò≥ùò∞ ùò∞ùò£ùòµùò¶ùòØùò¶ùò≥ ùò¶ùò≠ ùò¢ùò∂ùò•ùò™ùò∞.ü•ñ');

    const videoUrl = video.url;
    const thumbnail = video.thumbnail;
    const title = video.title;
    const fduration = video.timestamp;
    const views = video.views.toLocaleString();
    const channel = video.author.name || 'Desconocido';

    const infoMessage = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë ùò†ùòñùòúùòõùòúùòâùòå / ùòâùòñùòìùòêùòìùòìùòñùòâùòñùòõ ü•ñ
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  
> ùòöùò™ ùò¶ùò≠ ùò§ùò∞ùòÆùò¢ùòØùò•ùò∞ ùò±ùò≥ùò¶ùò¥ùò¶ùòØùòµùò¢ ùò±ùò≥ùò∞ùò£ùò≠ùò¶ùòÆùò¢ùò¥.\nùòúùò¥ùò¢ .ùò≥ùò¶ùò±ùò∞ùò≥ùòµ ùò∞ ùò±ùò≥ùò∂ùò¶ùò£ùò¢ ùò§ùò∞ùòØ .ùò±ùò≠ùò¢ùò∫, ùò≠ùò∞ ùò¥ùò∞ùò≠ùò∂ùò§ùò™ùò∞ùòØùò¢ùò≥ùò¶ùòÆùò∞ùò¥ ùò≠ùò∞ ùò¢ùòØùòµùò¶ùò¥ ùò±ùò∞ùò¥ùò™ùò£ùò≠ùò¶. ü•ñ`;

    await conn.sendFile(m.chat, thumbnail, 'imagen.jpg', infoMessage, m);

    const apiURL = `https://api.neoxr.eu/api/youtube?url=${encodeURIComponent(videoUrl)}&type=audio&quality=128kbps&apikey=russellxz`;
    const res = await axios.get(apiURL);
    const json = res.data;

    if (!json.status || !json.data?.url) throw new Error("> ùòïùò∞ ùò¥ùò¶ ùò±ùò∂ùò≥ùò∞ ùò∞ùò£ùòµùò¶ùòØùò¶ùò≥ ùò¶ùò≠ ùò¢ùò∂ùò•ùò™ùò∞.ü•ñ");

    const tmpDir = path.join('./tmp');
    if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir);

    const rawPath = path.join(tmpDir, `${Date.now()}_raw.m4a`);
    const finalPath = path.join(tmpDir, `${Date.now()}_final.mp3`);

    const audioRes = await axios.get(json.data.url, { responseType: 'stream' });
    await streamPipeline(audioRes.data, fs.createWriteStream(rawPath));

    await new Promise((resolve, reject) => {
      ffmpeg(rawPath)
        .audioCodec('libmp3lame')
        .audioBitrate('128k')
        .format('mp3')
        .save(finalPath)
        .on('end', resolve)
        .on('error', reject);
    });

    await conn.sendMessage(m.chat, {
      audio: fs.readFileSync(finalPath),
      mimetype: 'audio/mpeg',
      fileName: `${title}.mp3`
    }, { quoted: m });

    fs.unlinkSync(rawPath);
    fs.unlinkSync(finalPath);

    await conn.sendMessage(m.chat, {
      react: { text: '‚úÖ', key: m.key }
    });

  } catch (err) {
    console.error(err);
    await conn.sendMessage(m.chat, { text: `‚ùå *Error:* ${err.message}` }, { quoted: m });
    await conn.sendMessage(m.chat, { react: { text: '‚ùå', key: m.key } });
  }
};

handler.command = ['play'];
export default handler;